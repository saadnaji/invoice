Invoicev2: THEORY
BEGIN
  delta: posreal % sampling time
  %IMPORTING Time[delta]
  IMPORTING number_fields
  IMPORTING structures@bags
  IMPORTING array2bag


  

% Types
   n : TYPE+ = {id : nat |  id <= 10000} % check here
   orders_n : TYPE+ = {id : posnat |  id <= 10000} % check here
   product: TYPE
   e : set[PRODUCT] = emptyset
   status : type+= { ok , error , msg1,msg2,msg3 ,msg4,msg5,msg6,msg7, msg8 , msg9 , msg10, msg11}
   state : type+ = { pending , invoiced}



% abstract varaible
 STATE : TYPE =
 [#     report : status
	,id : n
	,products : set[PRODUCT]
	,stock : bag[(products)] 
	,orders: set[orders_n]
	,carts :  [ (orders) -> bag[(products)] ] 
	,order_state : [ (orders) -> state]
 #]
 st : VAR [ DTIME -> STATE ]

% helper function
emptyfun [T, U : TYPE] (x : {x : T | FALSE}) : RECURSIVE U = 
    emptyfun(x) 
    MEASURE (LAMBDA (x : {x : T | FALSE}): 1)

int_state :  STATE =
	  (#
		report := ok
		,id := 0
		,products := emptyset
		,stock := emptybag
		,orders:= emptyset
		,carts := emptyfun
		,order_state := emptyfun
	  #)


 

% 
    
% opetrations
       
 subtract [D : TYPE, R : TYPE]
       (f : [D -> R], x : D)
       (y : { y : D | y /= x }) : R = f( y )

% Monitored Events

COMMAND : DATATYPE
    BEGIN
      nothing                                                        :isNothing?
      add_types(product_id: PRODUCT)                                 :isAdd_type?
      add_product(a_product: PRODUCT , quantity: integer)            :isAdd_product? 
      %add_order (a_order:  set[ [PRODUCT -> integer] ]  ) 	     :isAdd_order? 
      invoice(order_id: orders_n)			             :isInvoice? % check here with orders_n
      cancel_order(order_id: orders_n)                               :isCancel_order?
      add_order (a_order: ARR_PRODUCT  )                             :is_Add_order??
    END COMMAND 
  cmd: VAR [DTIME -> COMMAND]

%======================================================================================================================
empty_string(product_id : PRODUCT) : bool =
member(singleton(product_id),e)

orders_bagp_have_same_types (product_id : PRODUCT)(st) (i :POS_DTIME) : bool =
FORALL (x1: (st(i - 1)`orders), x: PRODUCT):  st(i - 1)`products(x) IFF union[PRODUCT] (singleton[PRODUCT](product_id),  st(i - 1)`products) (x)

add_types (product_id : PRODUCT) (st) (i : POS_DTIME) : bool =
  cond
		
	not products_(product_id) and 	not  empty_string(product_id)  -> orders_bagp_have_same_types (product_id)(st) (i) and
												st(i) =  st(i-1) with [       report := ok,
													products := union(singleton(product_id),products_),
													stock := stock_ with [ product_id := 0 ] 
	    			     	      	      	                                        ],
         products_(product_id) or   empty_string(product_id)   ->
							         cond		
									 empty_string(product_id)  -> st(i) = st(i-1) with [ report := msg1],  % prd is empty string 					
	                                                                 products_(product_id)  -> st(i) = st(i-1) with [ report := msg2]  % prd already in db
								 endcond
  endcond
  where
	report_ = st(i-1) `report
	,id_ = st(i-1) `id
	,products_ = st(i-1) `products
	,stock_ = st(i-1)   `stock
	,orders_ = st(i-1) `orders
	,carts_ = st(i-1) `carts
	,order_state_ = st(i-1) `order_state

%===========================================================================================

 

 add_product(a_product: PRODUCT , quantity: integer) (st) (i :POS_DTIME) : bool =
  cond
      
	   	quantity > 0  ->  cond		
					 products_(a_product) -> st(i) = st(i-1) with [ stock := stock_ with [ a_product := quantity] , report := ok],
					 not products_(a_product) ->  st(i) = st(i-1) with [ report := msg3]  % products not in db
	 		      	  endcond,
		
		     	 		             
	        quantity <= 0  ->  st(i) = st(i-1) with [ report := msg4]  % quantity must be positive
		     	 
  endcond
  where
	report_ = st(i-1) `report
	,id_ = st(i-1) `id
	,products_ = st(i-1) `products
	,stock_ = st(i-1)   `stock
	,orders_ = st(i-1) `orders
	,carts_ = st(i-1) `carts
	,order_state_ = st(i-1) `order_state

%===============================================================================================
no_more_id(st) (i : DTIME) : bool =
full?(st(i) `orders) % check here

products_valid ( i:DTIME) (a : ARR_PRODUCT) : bool =
FORALL (m : dom(a)) : member((a@@m)`p, products(i))

no_products_dup ( i:DTIME) (a : ARR_PRODUCT) : bool =
FORALL (m, n: dom(a)) : m /= n => (a@@m)`p /= (a@@n)`p

quantity_pos ( i:DTIME) (a : ARR_PRODUCT) : bool =
FORALL (m : dom(a)) : 0 <= (a@@m)`q 

enough_stock  (a_order:  bag[PRODUCT] ) (st)  ( i : DTIME) : bool =
 forall ( prod :PRODUCT) :  st(i)`products(prod)  =>  ( st(i) `stock (prod) - a_order(prod) >= 0) % check here



%singleton?[ARR_PRODUCT](valid_bag?(i - 1))
%get_bag (i : DTIME)  : bag[PRODUCT] =  (array2bag (i-1) (valid_bag?(i-1) ))

 add_order (a_order: ARR_PRODUCT  ) (st) ( i :POS_DTIME) : bool =
  cond
  not no_more_id(st)(i-1)  ->
			     cond
				a_order `size  >  0 ->
					cond
						 valid_bag?(i-1) (a_order) ->
						 		 	   
									  %forall( n : nat, t  : TUPLE , p : PRODUCT) :
									  %a_order `content(n)(t)(p)   and products_(p) and
									   
						                           cond
						 		 	            enough_stock( array2bag (i-1) (valid_bag?(i-1)) )(st)(i-1) ->
										     		  	    	  		    	         forall(prod: PRODUCT) :
								     										 exists(new_id : orders_n): % generate new id
																		 %singleton?[ARR_PRODUCT](valid_bag?(i - 1)) and
								     										 products_(prod) and
								     										 not orders_(new_id) and
								    										  st(i) = st(i-1) with [
																	          report := ok,
											   						          id := new_id,
											                             stock := stock_ with [ prod := (stock_(prod)) -  array2bag (i-1) (valid_bag?(i-1)) (prod)],
											   				                           orders := union(singleton(new_id),orders_),
											    			     carts := carts_ with [ new_id :=  array2bag (i-1) (valid_bag?(i-1))],
											    							 order_state := order_state_ with [ new_id := pending ]
								     	     	     	  ],
									not enough_stock ( array2bag (i-1) (valid_bag?(i-1)) )(st)(i-1) ->  st(i) = st(i-1) with [ report := msg9 ] % not enough in stock
									   endcond,
						 not valid_bag?(i-1) (a_order) ->
						     cond
						        not quantity_pos (i-1) (a_order) ->  st(i) = st(i-1) with [ report := msg4 ], % quantity must be positive

                                                        quantity_pos (i-1) (a_order)->
							cond	
							  not products_valid (i-1) (a_order) ->  st(i) = st(i-1) with [ report := msg7 ], % some product is not valid

                                                           products_valid (i-1) (a_order) ->
								   cond
								      not no_products_dup (i-1) (a_order) -> st(i) = st(i-1) with [ report := msg8 ]  % duplicate products
		                			           endcond

							endcond
						 
						     endcond
					endcond,
				
			        not a_order `size  >  0  ->  st(i) = st(i-1) with [ report := msg6] % cart must be non empty
			     endcond,
  no_more_id(st)(i-1) ->  st(i) = st(i-1) with [ report := msg5] %  no id are avalibe
  
  
  endcond
   where
	report_ = st(i-1) `report
	,id_ = st(i-1) `id
	,products_ = st(i-1) `products
	,stock_ = st(i-1)   `stock
	,orders_ = st(i-1) `orders
	,carts_ = st(i-1) `carts
	,order_state_ = st(i-1) `order_state


%===================================================================================================================================


  % add_order (a_order:  bag[PRODUCT]  ) (st) ( i :POS_DTIME) : bool =
   %cond
	%add_order_ok(a_order)(st)(i-1) and not no_more_id(st)  (i-1) ->
								    
								    % forall(prod: PRODUCT) :
								     %exists(new_id : orders_n): % generate new id
								     %products_(prod) and
								     %not orders_(new_id) and
								     %st(i) = st(i-1) with [
											    %report := ok,
											    %id := new_id,
											    %stock := stock_ with [ prod := (stock_(prod)) - a_order(prod)],
											    %orders := union(singleton(new_id),orders_),
											    %carts := carts_ with [ new_id := a_order],
											    %order_state := order_state_ with [ new_id := pending ]
								     	     	     	  %],
       %else -> st(i) = st(i -1) with [ report := error]
								     

   %endcond
    %where
	%report_ = st(i-1) `report
	%,id_ = st(i-1) `id
	%,products_ = st(i-1) `products
	%,stock_ = st(i-1)   `stock
	%,orders_ = st(i-1) `orders
	%,carts_ = st(i-1) `carts
	%,order_state_ = st(i-1) `order_state
%==============================================================================================================


invoice(order_id: orders_n)  (st) ( i :POS_DTIME) : bool =
   cond
	orders_(order_id) ->
				cond
				order_state_(order_id) = pending ->     st(i) = st(i-1) with [
				                                        report := ok,
								        order_state := order_state_ with [ order_id := invoiced]
	                  						] ,
			         order_state_(order_id) = invoiced  -> st(i) = st(i-1) with [report := msg11]  % already invoiced
				
				endcond,
	not orders_(order_id) ->  st(i) = st(i-1) with [report := msg10]	% order id not valid		


   endcond
   where
	report_ = st(i-1) `report
	,id_ = st(i-1) `id
	,products_ = st(i-1) `products
	,stock_ = st(i-1)   `stock
	,orders_ = st(i-1) `orders
	,carts_ = st(i-1) `carts
	,order_state_ = st(i-1) `order_state

%==========================================================================================================================

cancel_order(order_id: orders_n) (st) ( i :POS_DTIME) : bool =
  cond
	orders_(order_id) ->	
				  forall(prod: PRODUCT) :
				  products_(prod) and
				                         st(i) = st(i-1) with
							 [
						         report := ok,
							 stock := stock_ with [ prod := (stock_(prod)) +  carts_(order_id)(prod) ],
							 orders := remove(order_id,orders_),
							 carts := subtract(carts_,order_id),
							 order_state := subtract(order_state_,order_id)
							  ],
	not orders_(order_id) -> st(i) = st(i-1) with [ report := msg10]  % order id not valid
  endcond
   where
	report_ = st(i-1) `report
	,id_ = st(i-1) `id
	,products_ = st(i-1) `products
	,stock_ = st(i-1)   `stock
	,orders_ = st(i-1) `orders
	,carts_ = st(i-1) `carts
	,order_state_ = st(i-1) `order_state
%=====================================================================================================

    nothing (st) (i : POS_DTIME) : bool =
    st(i) = st(i-1)

%====================================================================================================

	Invoice_ftn (product_id : PRODUCT , quantity: integer, a_order: ARR_PRODUCT ,order_id: orders_n )(st)   (i : DTIME) : bool =
	cond
		i = 0 -> st(0) = int_state,

		i > 0 -> add_types(product_id) (st) (i) and
		      	 add_product(product_id,quantity) (st) (i) and
			 add_order (a_order ) (st) ( i) and
			 invoice (order_id)  (st) ( i) and
			 cancel_order(order_id) (st) ( i) and
			 nothing (st) (i) 
			  
		         
		 
	endcond
    
END Invoicev2
