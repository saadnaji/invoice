(Invoicev2
 (n_TCC1 0
  (n_TCC1-1 nil 3626314725
   ("" (existence-tcc) (("" (inst 1 "0") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   nil))
 (orders_n_TCC1 0
  (orders_n_TCC1-1 nil 3626314725
   ("" (existence-tcc) (("" (inst 1 "1") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil))
   nil))
 (emptyfun_TCC1 0
  (emptyfun_TCC1-1 nil 3626314725 ("" (termination-tcc) nil nil) nil
   nil))
 (int_state_TCC1 0
  (int_state_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (orders_bagp_have_same_types_TCC1 0
  (orders_bagp_have_same_types_TCC1-1 nil 3626376419
   ("" (subtype-tcc) nil nil) nil nil))
 (add_types_TCC1 0
  (add_types_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil) nil nil))
 (add_types_TCC2 0
  (add_types_TCC2-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (STATE type-eq-decl nil Invoicev2 nil)
    (status type-decl nil Invoicev2 nil)
    (bag type-eq-decl nil bags "structures/")
    (PRODUCT nonempty-type-decl nil array2bag nil)
    (state type-decl nil Invoicev2 nil) (set type-eq-decl nil sets nil)
    (DTIME type-eq-decl nil Time nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (orders_bagp_have_same_types const-decl "bool" Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC3 0
  (add_types_TCC3-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (orders_bagp_have_same_types const-decl "bool" Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC4 0
  (add_types_TCC4-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC5 0
  (add_types_TCC5-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC6 0
  (add_types_TCC6-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC7 0
  (add_types_TCC7-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC8 0
  (add_types_TCC8-1 nil 3626373067 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_types_TCC9 0
  (add_types_TCC9-1 nil 3626375916 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (e const-decl "set[PRODUCT]" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (singleton_elt const-decl "T" sets nil)
    (emptyset const-decl "set" sets nil)
    (empty_string const-decl "bool" Invoicev2 nil))
   nil))
 (add_product_TCC1 0
  (add_product_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (add_product_TCC2 0
  (add_product_TCC2-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (add_product_TCC3 0
  (add_product_TCC3-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (add_product_TCC4 0
  (add_product_TCC4-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (add_product_TCC5 0
  (add_product_TCC5-1 nil 3626373067 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (enough_stock_TCC1 0
  (enough_stock_TCC1-1 nil 3626378648 ("" (subtype-tcc) nil nil) nil
   nil))
 (add_order_TCC1 0
  (add_order_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil) nil nil))
 (add_order_TCC2 0
  (add_order_TCC2-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC3 0
  (add_order_TCC3-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (singleton_elt const-decl "T" sets nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC4 0
  (add_order_TCC4-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC5 0
  (add_order_TCC5-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC6 0
  (add_order_TCC6-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRODUCT nonempty-type-decl nil array2bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (singleton_elt const-decl "T" sets nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC7 0
  (add_order_TCC7-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (singleton_elt const-decl "T" sets nil)
    (singleton? const-decl "bool" sets nil)
    (enough_stock const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC8 0
  (add_order_TCC8-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (products_valid const-decl "bool" Invoicev2 nil)
    (quantity_pos const-decl "bool" Invoicev2 nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (no_products_dup const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC9 0
  (add_order_TCC9-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (quantity_pos const-decl "bool" Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (products_valid const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC10 0
  (add_order_TCC10-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (quantity_pos const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC11 0
  (add_order_TCC11-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (@@ const-decl "TUPLE" array2bag nil)
    (/= const-decl "boolean" notequal nil)
    (valid_bag? const-decl "bool" array2bag nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC12 0
  (add_order_TCC12-1 nil 3626373067 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_order_TCC13 0
  (add_order_TCC13-1 nil 3626377865 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (member const-decl "bool" sets nil)
    (full? const-decl "bool" sets nil)
    (no_more_id const-decl "bool" Invoicev2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (invoice_TCC1 0
  (invoice_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (invoice_TCC2 0
  (invoice_TCC2-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (invoice_TCC3 0
  (invoice_TCC3-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (invoice_TCC4 0
  (invoice_TCC4-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (cancel_order_TCC1 0
  (cancel_order_TCC1-1 nil 3626314725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil))
 (cancel_order_TCC2 0
  (cancel_order_TCC2-1 nil 3626373067 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (orders_n nonempty-type-eq-decl nil Invoicev2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n nonempty-type-eq-decl nil Invoicev2 nil))
   nil))
 (Invoice_ftn_TCC1 0
  (Invoice_ftn_TCC1-1 nil 3626314725 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (DTIME type-eq-decl nil Time nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Invoice_ftn_TCC2 0
  (Invoice_ftn_TCC2-1 nil 3626314725 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" array2bag nil)
    (DTIME type-eq-decl nil Time nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

